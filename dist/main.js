/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const body = document.body;\nconst input = document.getElementById(\"city-input\");\nconst deleteIcon = document.getElementById(\"delete-icon\");\nconst settingsButton = document.getElementById(\"settings\");\nconst tempUnit = document.getElementById(\"temp-unit\");\nconst speedUnit = document.getElementById(\"speed-unit\");\nconst themeOption = document.getElementById(\"theme-option\")\nconst dropdownMenu = document.getElementById(\"dropdown-menu\");\n\nwindow.onload = () => {\n    input.value = \"Barcelona\";\n    getWeatherData();\n\n    setTimeout(() => {\n        const loadingPage = document.getElementById(\"loading-page\");\n        const mainPage = document.getElementById(\"main-page\");\n\n        loadingPage.style.opacity = \"0\";\n\n        mainPage.style.opacity = \"1\";\n\n        setTimeout(() => {\n            loadingPage.style.display = \"none\";\n        }, 2000);\n        \n    }, 1000);\n}\n\n\nconst celsiusToFahr = (celsius) => (celsius * 1.8) + 32;\nconst fahrToCelsius = (fahr) => (fahr - 32) / 1.8;\nconst kmhToMph = (kmh) => (kmh * kmh * 0.621371);\nconst mphToKmh = (mph) => (mph * 1.60934);\n\n\nfunction assignIcon(outputName, icon) {\n    switch (outputName) {\n        case \"snow\":\n            icon.src = \"assets/snow.svg\"\n            break;\n        case \"rain\":\n            icon.src = \"assets/rain.svg\"\n            break;\n        case \"fog\":\n            icon.src = \"assets/fog.svg\"\n            break;\n        case \"wind\":\n            icon.src = \"assets/wind.svg\"\n            break;\n        case \"cloudy\":\n            icon.src = \"assets/cloudy.svg\"\n            break;\n        case \"partly-cloudy-day\":\n            icon.src = \"assets/partly-cloudy-day.svg\"\n            break;\n        case \"partly-cloudy-night\":\n            icon.src = \"assets/partly-cloudy-night.svg\"\n            break;\n        case \"clear-day\":\n            icon.src = \"assets/clear-day.svg\"\n            break;\n        case \"clear-night\":\n            icon.src = \"assets/clear-night.svg\"\n            break;\n        case \"snow-showers-night\":\n            icon.src = \"assets/extreme-night-snow.svg\"\n            break;\n        case \"thunder-rain\":\n            icon.src = \"assets/thunderstorms-rain.svg\"\n            break;\n        case \"thunder-showers-day\":\n            icon.src = \"assets/thunderstorms-day-rain.svg\"\n            break;\n        case \"thunder-showers-night\":\n            icon.src = \"assets/thunderstorms-night-rain.svg\"\n            break;\n        case \"showers-day\":\n            icon.src = \"assets/rain.svg\"\n            break;\n        case \"showers-night\":\n            icon.src = \"assets/rain.svg\"\n            break;\n        default:\n            icon.src = \"assets/clear-day.svg\";\n            break;\n        }\n    };\n\nasync function getWeatherData() {\n    try {\n        let city = input.value;\n        let response = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${city}?key=SBT2PTJB3ASMEVTUST7UJU9GH`, {\n            mode: 'cors'\n        });\n            \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n    \n        let rawData = await response.json();\n        displayInfo(rawData);\n    } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n        displayError(`Failed to fetch weather data: ${error.message}`);\n    }\n};\n\n    function displayError(message) {\n        const errorElement = document.getElementById('error-message');\n        const modal = document.getElementById(\"modal\");\n        const closeModal = document.getElementById(\"close\");\n        errorElement.textContent = message;\n        modal.style.display = \"block\";\n\n        closeModal.addEventListener(\"click\", () => {\n            modal.style.display = \"none\";\n        })\n    };\n        \n\nlet mainTemp;\nlet fahrTemp;\nlet mainTempCelsius;\nlet fahrMinTemp;\nlet minTempCelsius;\nlet minTemp;\nlet fahrMaxTemp;\nlet maxTempCelsius;\nlet maxTemp;\nlet wind;\nlet minTempEl;\nlet minTempElCelsius;\nlet maxTempEl;\nlet maxTempElCelsius;\nlet minTempDailyArray;\nlet maxTempDailyArray;\nlet windValueKmh;\nlet windValueMph;\n\n\nfunction displayInfo(rawData) {\n\n    console.log(rawData)\n\n    const mainIcon = document.getElementById(\"main-icon\");\n    let iconWeather = rawData.currentConditions.icon;\n    assignIcon(iconWeather, mainIcon);\n    \n    mainTemp = document.getElementById(\"temperature\");\n    fahrTemp = rawData.currentConditions.temp;\n    mainTempCelsius = fahrToCelsius(fahrTemp);\n    mainTemp.textContent = Math.floor(mainTempCelsius) + \"ºC\";\n\n    const mainDesc = document.getElementById(\"short-description\");\n    mainDesc.textContent = rawData.currentConditions.conditions;\n\n    minTemp = document.getElementById(\"min-temperature-value\");\n    fahrMinTemp = rawData.days[0].tempmin;\n    minTempCelsius = fahrToCelsius(fahrMinTemp);\n    minTemp.textContent = Math.floor(minTempCelsius) + \"ºC\";\n\n    maxTemp = document.getElementById(\"max-temperature-value\");\n    fahrMaxTemp = rawData.days[0].tempmax\n    maxTempCelsius = fahrToCelsius(fahrMaxTemp);\n    maxTemp.textContent = Math.floor(fahrToCelsius(fahrMaxTemp)) + \"ºC\";\n\n    const chanceRain = document.getElementById(\"chance-rain\");\n    chanceRain.textContent = rawData.days[0].precipprob + \"%\";\n\n    const humidity = document.getElementById(\"humidity\");\n    humidity.textContent = rawData.currentConditions.humidity + \"%\";\n\n    wind = document.getElementById(\"wind\");\n    windValueKmh = rawData.currentConditions.windspeed;\n    windValueMph = Math.round(kmhToMph(windValueKmh) * 10) / 10;\n    wind.textContent = windValueKmh + \" km/h\";\n\n    const uvIndex = document.getElementById(\"uv-index\");\n    uvIndex.textContent = rawData.currentConditions.uvindex;\n\n    const sunrise = document.getElementById(\"sunrise\");\n    sunrise.textContent = rawData.currentConditions.sunrise.substring(0, 5);\n\n    const sunset = document.getElementById(\"sunset\");\n    sunset.textContent = rawData.currentConditions.sunset.substring(0, 5);\n\n    const hourlyForecastTime = document.getElementsByClassName(\"hourly-time\");\n    const timeArray = Array.from(hourlyForecastTime);\n    let hour = Number(rawData.currentConditions.datetime.substring(0,2));\n    \n    timeArray.forEach((time, i) => {\n        let hourElement = hour + i + 1;\n        if (hourElement < 24) {\n            time.textContent = rawData.days[0].hours[hourElement].datetime.substring(0,2) + \" H\";\n        } else {\n            time.textContent = rawData.days[1].hours[hourElement - 24].datetime.substring(0,2) + \" H\";\n        };\n    });\n\n    const hourlyForecastIcon = document.getElementsByClassName(\"hourly-icon\");\n    const iconArray = Array.from(hourlyForecastIcon);\n\n    iconArray.forEach((hourIcon, i) => {\n        let hourElement = hour + i + 1;\n        if (hourElement < 24) {\n            iconHourly = rawData.days[0].hours[hourElement].icon;\n        } else {\n            iconHourly = rawData.days[1].hours[hourElement - 24].icon;\n        };\n        assignIcon(iconHourly, hourIcon)\n    });\n\n    const dailyForecastIcon = document.getElementsByClassName(\"daily-icon\");\n    const iconDailyArray = Array.from(dailyForecastIcon);\n\n    iconDailyArray.forEach((dayIcon, i) => {\n        let iconDaily = rawData.days[i + 1].icon\n        assignIcon(iconDaily, dayIcon);\n    });\n\n    const weekday = document.getElementsByClassName(\"weekday\");\n    const weekdayArray = Array.from(weekday);\n    let day = new Date().getDay();\n    const dayArray = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"];\n\n    weekdayArray.forEach((element, i) => {\n        element.textContent = dayArray[day + i + 1];\n    });\n\n    minTempDaily = document.getElementsByClassName(\"daily-min-temperature\");\n    minTempDailyArray = Array.from(minTempDaily);\n\n    minTempDailyArray.forEach((element, i) => {\n        minTempEl = rawData.days[i + 1].tempmin;\n        minTempElCelsius = fahrToCelsius(minTempEl);\n        element.textContent = Math.floor(minTempElCelsius);\n    });\n\n    maxTempDaily = document.getElementsByClassName(\"daily-max-temperature\");\n    maxTempDailyArray = Array.from(maxTempDaily);\n\n    maxTempDailyArray.forEach((element, i) => {\n        maxTempEl = rawData.days[i + 1].tempmax;\n        maxTempElCelsius = fahrToCelsius(maxTempEl);\n        element.textContent = Math.floor(maxTempElCelsius);\n    });\n};\n\nconst clearInput = () => {\n    input.value = \"\";\n    deleteIcon.style.display = \"none\";\n}\n\nconst displayDeleteIcon = () => {\n    if (input.value === \"\") {\n        deleteIcon.style.display = \"none\";\n    } else {\n        deleteIcon.style.display = \"block\";\n    };\n}\n\nconst openSettings = () => {\n        if (dropdownMenu.style.display === \"none\" || dropdownMenu.style.display === \"\") {\n            dropdownMenu.style.display = \"block\";\n        } else {\n            dropdownMenu.style.display = \"none\";\n    }\n};\n\nconst toggleTemp = (event) => {\n    if (event.target.textContent === \"Celsius\") {\n        tempUnit.textContent = \"Fahrenheit\";\n        mainTemp.textContent = Math.floor(mainTempCelsius) + \"ºC\";\n        minTemp.textContent = Math.floor(minTempCelsius) + \"ºC\";\n        maxTemp.textContent = Math.floor(maxTempCelsius) + \"ºC\";\n        \n        minTempDailyArray.forEach((element) => {\n            const minTempDailyValue = element.textContent;\n            element.textContent = Math.floor(fahrToCelsius(minTempDailyValue));\n        });\n\n        maxTempDailyArray.forEach((element) => {\n            const maxTempDailyValue = element.textContent;\n            element.textContent = Math.floor(fahrToCelsius(maxTempDailyValue));\n        });\n\n    } else {\n        tempUnit.textContent = \"Celsius\";\n        mainTemp.textContent = Math.floor(fahrTemp) + \"ºF\";\n        minTemp.textContent = Math.floor(fahrMinTemp) + \"ºF\";\n        maxTemp.textContent = Math.floor(fahrMaxTemp) + \"ºF\";\n        \n        minTempDailyArray.forEach((element) => {\n            const minTempDailyValue = element.textContent;\n            element.textContent = Math.floor(celsiusToFahr(minTempDailyValue));\n        });\n\n        maxTempDailyArray.forEach((element) => {\n            const maxTempDailyValue = element.textContent;\n            element.textContent = Math.floor(celsiusToFahr(maxTempDailyValue));\n        });\n    };\n\n\n};\n\nconst toggleSpeed = (event) => {\n    if (event.target.textContent === \"km/h\") {\n        speedUnit.textContent = \"mph\";\n        wind.textContent = windValueKmh + \" km/h\";\n    } else {\n        speedUnit.textContent = \"km/h\";\n        wind.textContent = windValueMph + \" mph\";\n    };\n};\n\nconst toggleTheme = (event) => {\n    if (event.target.textContent === \"Dark mode\") {\n        event.target.textContent = \"Light mode\";\n        body.classList.toggle(\"dark-mode\");\n\n        const themeIcon = document.getElementById(\"theme-icon\");\n        themeIcon.classList.toggle(\"fa-moon\");\n        themeIcon.classList.toggle(\"fa-lightbulb\");\n    } else {\n        event.target.textContent = \"Dark mode\";\n        body.classList.toggle(\"dark-mode\");\n\n        const themeIcon = document.getElementById(\"theme-icon\");\n        themeIcon.classList.toggle(\"fa-moon\");\n        themeIcon.classList.toggle(\"fa-lightbulb\");\n    }\n};\n\ninput.addEventListener(\"change\", getWeatherData);\ninput.addEventListener(\"input\", displayDeleteIcon);\n\ninput.addEventListener(\"click\", () => {\n    input.select();\n});\n\ndeleteIcon.addEventListener(\"click\", clearInput);\nsettingsButton.addEventListener(\"click\", openSettings);\ntempUnit.addEventListener(\"click\", toggleTemp);\nspeedUnit.addEventListener(\"click\", toggleSpeed);\nthemeOption.addEventListener(\"click\", toggleTheme);\n\n\nwindow.addEventListener(\"click\", (event) => {\n    if (!dropdownMenu.contains(event.target) && !settingsButton.contains(event.target)) {\n        dropdownMenu.style.display = \"none\";\n    };\n});\n\n//# sourceURL=webpack://weather-api/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;